[build-system]
requires = ["hatchling", "hatch-vcs", "nipreps-versions"]
build-backend = "hatchling.build"

[project]
name = "aslprep"
description = "ASLPrep - A Robust Preprocessing Pipeline for ASL Data"
readme = "long_description.rst"
authors = [{name = "The ASLPrep Developers"}]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Image Recognition",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
license = {file = "LICENSE.md"}
requires-python = ">=3.10"
dependencies = [
    'importlib_resources; python_version < "3.11"',
    "acres",
    "fmriprep ~= 25.1.0",
    "indexed_gzip",
    "looseversion",
    "networkx ~= 3.3",  # nipype needs networkx, but 3+ isn"t compatible with nipype 1.8.5
    "nibabel",
    "nilearn ~= 0.11.0",
    "nipype >= 1.8.5",
    "nireports >= 25.1.0",
    "nitime >= 0.9",
    "nitransforms >= 25.0.1",
    "niworkflows ~= 1.14.0",
    "numpy ~= 2.0",
    "packaging",
    "pandas",
    "psutil >= 5.4",
    "pybids >= 0.16",
    "requests",
    "sdcflows ~= 2.13.0",
    "sentry-sdk",
    "smriprep ~= 0.18.0",
    "templateflow",
    "toml",
    "transforms3d ~= 0.4",
    "codecarbon >= 2",
    "APScheduler >= 3.10",
]
dynamic = ["version"]

[project.urls]
Homepage = "https://github.com/PennLINC/aslprep"
Documentation = "https://www.aslprep.readthedocs.io"
Paper = "https://doi.org/10.1038/s41592-022-01458-7"
"Docker Images" = "https://hub.docker.com/r/pennlinc/aslprep/tags/"
NiPreps = "https://www.nipreps.org/"

[project.optional-dependencies]
doc = [
    "doctest-ignore-unicode",
    "lxml_html_clean",
    "myst_parser",
    "nbsphinx",
    "packaging",
    "pydot >= 1.2.3",
    "pydotplus",
    "sphinx >= 6.2.1",
    "sphinx-argparse",
    "sphinx-markdown-tables",
    "sphinx_rtd_theme >= 1.2.2",
    "sphinxcontrib-apidoc",
    "sphinxcontrib-bibtex",
]
dev = [
    "ruff ~= 0.13.0",
    "pre-commit",
]
test = [
    "codecov",
    "coverage",
    "pytest",
    "pytest-cov",
]
maint = [
    "fuzzywuzzy",
    "python-Levenshtein",
]

# Aliases
all = ["aslprep[dev,doc,maint,test]"]

[project.scripts]
aslprep = "aslprep.cli.run:main"
aslprep-combineqc = "aslprep.cli.aggregate_qc:main"

#
# Hatch configurations
#

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.sdist]
exclude = [".git_archival.txt"]  # No longer needed in sdist

[tool.hatch.build.targets.wheel]
packages = ["aslprep"]
exclude = [
    "aslprep/tests/data",  # Large test data directory
]

##  The following two sections configure setuptools_scm in the hatch way

[tool.hatch.version]
source = "vcs"
# raw-options = { version_scheme = "nipreps-calver" }

[tool.hatch.build.hooks.vcs]
version-file = "aslprep/_version.py"

[tool.pixi.workspace]
channels = ["https://fsl.fmrib.ox.ac.uk/fsldownloads/fslconda/public", "conda-forge"]
platforms = ["linux-64"]

[tool.pixi.activation.env]
FSLDIR = "$CONDA_PREFIX"

[tool.pixi.environments]
# Local installs will use editable
default = { features = ["editable"], solve-group = "default" }
dev = { features = ["dev"], solve-group = "default" }
doc = { features = ["doc"], solve-group = "default" }
test = { features = ["editable", "test"], solve-group = "default" }
# Use "fmriprep" feature for production environment, so it is identifiable
fmriprep = { features = ["production", "container", "telemetry"], solve-group = "production" }

[tool.pixi.feature.editable.pypi-dependencies]
fmriprep = { path = ".", editable = true }
[tool.pixi.feature.production.pypi-dependencies]
fmriprep = { path = ".", editable = false }

[tool.pixi.tasks]

[tool.pixi.pypi-options.dependency-overrides]
numpy = ">=2.2"

[tool.pixi.dependencies]
python = "3.12.*"
nodejs = "20.*"
mkl = "2024.2.2.*"
mkl-service = "2.4.2.*"
numpy = "2.2.*"
scipy = "1.15.*"
matplotlib = "3.10.*"
pandas = "2.2.*"
h5py = "3.13.*"
nitime = "0.11.*"
scikit-image = "0.25.*"
scikit-learn = "1.6.*"
ants = "2.6.*"
connectome-workbench-cli = "2.0.*"
fsl-basil = "v4.0.*"
fsl-bet2 = "2111.8.*"
fsl-flirt = "2111.4.*"
fsl-fabber_core = "4.0.11.*"
fsl-fabber_models_asl = "v2.0.8.*"
fsl-fast4 = "2111.3.*"
fsl-fugue = "2201.5.*"
fsl-mcflirt = "2111.0.*"
fsl-miscmaths = "2412.4.*"
fsl-oxford_asl = "v4.0.29.*"
fsl-topup = "2203.5.*"
graphviz = "12.2.*"
pandoc = "3.7.*"

[tool.pixi.feature.container.dependencies]
git = "*"

[tool.pixi.feature.container.pypi-dependencies]
git-annex = ">=10.20250721"

#
# Developer tool configurations
#

# Disable black
[tool.black]
exclude = ".*"

[tool.ruff]
line-length = 99

[tool.ruff.lint]
extend-select = [
  "F",
  "E",
  "W",
  "I",
  "UP",
  "YTT",
  "S",
  "BLE",
  "B",
  "A",
  # "CPY",
  "C4",
  "DTZ",
  "T10",
  # "EM",
  "EXE",
  "FA",
  "ISC",
  "ICN",
  "PT",
  "Q",
]
ignore = [
  "UP031",  # TODO: Fix these
  "S311",  # We are not using random for cryptographic purposes
  "ISC001",
  "S603",
]

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"

[tool.ruff.lint.extend-per-file-ignores]
"*/test_*.py" = ["S101"]
"aslprep/utils/debug.py" = ["A002", "T100"]
"docs/conf.py" = ["A001"]
"docs/sphinxext/github_link.py" = ["BLE001"]

[tool.ruff.format]
quote-style = "single"

[tool.pytest.ini_options]
addopts = '-m "not examples_pcasl_singlepld_philips and not examples_pcasl_singlepld_siemens and not examples_pcasl_singlepld_ge and not examples_pcasl_multipld and not examples_pasl_multipld and not qtab and not test_001 and not test_002 and not test_003_minimal and not test_003_resampling and not test_003_full"'
markers = [
    "examples_pasl_multipld: mark integration test",
    "examples_pcasl_multipld: mark integration test",
    "examples_pcasl_singlepld_ge: mark integration test",
    "examples_pcasl_singlepld_philips: mark integration test",
    "examples_pcasl_singlepld_siemens: mark integration test",
    "qtab: mark integration test",
    "test_001: mark integration test",
    "test_002: mark integration test",
    "test_003_minimal: mark integration test",
    "test_003_resampling: mark integration test",
    "test_003_full: mark integration test",
]

[tool.coverage.run]
branch = false
omit = [
    "*/tests/*",
    "*/__init__.py",
    "*/conftest.py",
    "aslprep/_version.py"
]

[tool.coverage.paths]
source = [
  "aslprep",
  "**/site-packages/aslprep"
]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    'raise NotImplementedError',
    'warnings\.warn',
]
