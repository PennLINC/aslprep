version: 2
jobs:

  build:
    environment:
      TZ: "/usr/share/zoneinfo/America/New_York"
      SCRATCH: "/scratch"
    docker:
      - image: docker:18.06.1-ce-git
    working_directory: /tmp/src/aslprep
    steps:
      - run:
          name: Install parallel gzip tar and python3
          command: |
            apk add --no-cache pigz tar python3
      - restore_cache:
          keys:
            - docker-v2-{{ .Branch }}-{{ epoch }}
            - docker-v2-{{ .Branch }}-
            - docker-v2-master-
            - docker-v2-
          paths:
            - /tmp/cache/docker.tar.gz
      - checkout
      - setup_remote_docker
      - run:
          name: Load Docker image layer cache
          no_output_timeout: 30m
          command: |
            docker info
            set +o pipefail
            if [ -f /tmp/cache/docker.tar.gz ]; then
              pigz -d --stdout /tmp/cache/docker.tar.gz | docker load
              docker images
            fi
      - run:
          name: Build Docker image
          no_output_timeout: 5h
          command: |
            # Build docker image
            e=1 && for i in {1..5}; do
              docker build \
                --cache-from=pennlinc/aslprep \
                --rm=false \
                -t pennlinc/aslprep:latest . \
              && e=0 && break || sleep 15
            done && [ "$e" -eq "0" ]

      - run:
          name: Docker save
          no_output_timeout: 40m
          command: |
            mkdir -p /tmp/cache
            docker save  pennlinc/aslprep:latest \
            | pigz -8 -p 3 > /tmp/cache/docker.tar.gz


      - persist_to_workspace:
          root: /tmp
          paths:
            - cache/docker.tar.gz


  get_data:
    machine:
      image: circleci/classic:201711-01
    working_directory: /home/circleci/data
    steps:
      - restore_cache:
          keys:
            - data-v1-{{ epoch }}
            - data-v1-
      - run:
          name: Get test data and wkdir from box
          command: |
            mkdir -p /tmp/data
            if [[ ! -d /tmp/data/ds000240 ]]; then
              wget --retry-connrefused --waitretry=5 --read-timeout=20 --timeout=15 -t 0 -q \
                -O downsampled.tar.xz "https://upenn.box.com/shared/static/c89i5cj6gpn792rja2tehscuaqsgqgqr.xz"
              tar xvfJ downsampled.tar.xz -C /tmp/data/
            else
              echo "Dataset  data was cached"
            fi
            mkdir -p /tmp/wkdir/
            if [[ ! -d /tmp/wkdir/wk_dir ]]; then
              wget --retry-connrefused --waitretry=5 --read-timeout=20 --timeout=15 -t 0 -q \
                -O wkdir.tar.xz "https://upenn.box.com/shared/static/ysa31xq3qstpxpes8gga6e301tosncqg.xz"
              tar xvfJ wkdir.tar.xz -C /tmp/wkdir/
            else
              echo "wkdir  was cached"
            fi


      - persist_to_workspace:
          root: /tmp
          paths:
            - data
      - save_cache:
         key: data-v1-{{ epoch }}
         paths:
            - /tmp/data


  update_cache:
    machine:
      image: circleci/classic:201711-01
    working_directory: /tmp/src/aslprep
    steps:
      - attach_workspace:
          at: /tmp
      - save_cache:
         key: docker-v2-{{ .Branch }}-{{ epoch }}
         paths:
           - /tmp/cache/docker.tar.gz


  aslprep_ds:
    machine:
      image: circleci/classic:201711-01
    working_directory: /tmp/data
    steps:
      - checkout:
          path: /home/circleci/src/aslprep
      - run:
          name: Check whether build should be skipped
          command: |
            cd /home/circleci/src/aslprep
            if [[ "$( git log --format=oneline -n 1 $CIRCLE_SHA1 | grep -i -E '\[skip[ _]?aslprep_ds\]' )" != "" ]]; then
              echo "Skipping aslprep_ds build"
              circleci step halt
            fi
      - attach_workspace:
          at: /tmp
      - restore_cache:
          keys:
            - aslprep_ds-v2-{{ .Branch }}-{{ epoch }}
            - aslprep_ds-v2-{{ .Branch }}
            - aslprep_ds-v2-master
            - aslprep_ds-v2-
      - run:
          name: Setting up test
          command: |
            mkdir -p /tmp/aslprep_ds/aslOutput && sudo setfacl -d -m group:$(id -gn):rwx /tmp/aslprep_ds/aslOutput  && sudo setfacl -m group:$(id -gn):rwx /tmp/aslprep_ds/aslOutput
      - run:
          name: Load Docker image layer cache
          no_output_timeout: 1h
          command: |
            docker info
            set +o pipefail
            if [ -f /tmp/cache/docker.tar.gz ]; then
              sudo apt update && sudo apt -y install pigz
              pigz -d --stdout /tmp/cache/docker.tar.gz | docker load
              docker images
            fi
      - run:
          name: get freesurfer licence
          no_output_timeout: 5m
          command: |
            cd /tmp 
            wget  https://upenn.box.com/shared/static/wuh30asf9hi4kcl6k0gxstog6gv257fu.txt
            mv wuh30asf9hi4kcl6k0gxstog6gv257fu.txt licence.txt 
      - run:
          name: Run full aslprep on aslprep_ds bold
          no_output_timeout: 5h
          command: |
            sudo setfacl -d -m group:$(id -gn):rwx /tmp/aslprep_ds/aslOutput && \
                sudo setfacl -m group:$(id -gn):rwx /tmp/aslprep_ds/aslOutput
            mkdir -p /tmp/aslprep_ds/work
            sudo setfacl -d -m group:$(id -gn):rwx /tmp/aslprep_ds/work && \
                sudo setfacl -m group:$(id -gn):rwx /tmp/aslprep_ds/work

            docker run --rm -it \
                -v /tmp/data:/data \
                -v /tmp/wkdir:/wkdir \
                -v /tmp:/scrth \
                -v /tmp/aslprep_ds/:/out \
                pennlinc/aslprep:latest \
                /data/ds000240 \
                /out/aslOutput \
                participant --participant-label 01 \
                --clean-workdir \
                --skip_bids_validation  \
                -w /wkdir/wk_dir \
                --output-spaces func T1w MNI152NLin2009cAsym \
                --fs-license-file /scrth/licence.txt

      - run:
          name: Checking outputs of aslprep_ds
          command: |
            cbfile=$(ls -f /tmp/aslprep_ds/aslprep/sub-01/perf/sub-01_task-restEyesOpen_desc-quality_control_cbf.csv)
            if [[ -f ${cbfile} ]]; then 
            echo "processing complete"
               exit 0
            else 
            echo "there is error "
                exit 1
            fi

      - run:
          name: Clean working directory
          when: always
          command: |
            sudo chown $(id -un):$(id -gn) -R /tmp/wkdir
            rm -rf /tmp/wkdir

      - store_artifacts:
          path: /tmp/aslprep_ds

  deploy_docker:
    machine:
      image: circleci/classic:201711-01
    working_directory: /tmp/src/aslprep
    steps:
      - attach_workspace:
          at: /tmp
      - run:
          name: Load Docker image layer cache
          no_output_timeout: 2h
          command: |
            docker info
            set +o pipefail
            if [ -f /tmp/cache/docker.tar.gz ]; then
              sudo apt update && sudo apt -y install pigz
              pigz -d --stdout /tmp/cache/docker.tar.gz | docker load
              docker images
            fi
      - run:
          name: Deploy to Docker Hub
          no_output_timeout: 1h
          command: |
            if [[ -n "$DOCKER_PASS" ]]; then
              docker login -u $DOCKER_USER -p $DOCKER_PASS
              docker push pennlinc/aslprep:latest
            fi


workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/

      - get_data:
          filters:
            branches:
              ignore:
                - /docs?\/.*/
                - /tests?\/.*/
            tags:
              only: /.*/

      - update_cache:
          requires:
            - build
          filters:
            branches:
              ignore:
                - /docs?\/.*/
                - /tests?\/.*/
            tags:
              only: /.*/

      - aslprep_ds:
          requires:
            - get_data
            - build
          filters:
            branches:
              ignore:
                - /docs?\/.*/
                - /tests?\/.*/
            tags:
              only: /.*/

      - deploy_docker:
          requires:
            - build
            - aslprep_ds
          filters:
            branches:
              only: master
            tags:
              only: /.*/
