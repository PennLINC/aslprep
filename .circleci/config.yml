version: 2.1

.dockersetup: &dockersetup
  docker:
    - image: pennlinc/aslprep_build:main
  working_directory: /src/aslprep

runinstall: &runinstall
  name: Install aslprep
  command: |
    VERSION=0+build
    if [[ -n "$CIRCLE_TAG" ]]; then
      VERSION="$CIRCLE_TAG"
    fi
    git checkout $CIRCLE_BRANCH
    echo "${VERSION}" > /src/aslprep/aslprep/VERSION
    echo "include aslprep/VERSION" >> /src/aslprep/MANIFEST.in
    pip install .[tests] --progress-bar off

    # Write the config file
    mkdir ~/.nipype
    CFG=~/.nipype/nipype.cfg
    printf "[execution]\nstop_on_first_crash = true\n" > ${CFG}
    echo "poll_sleep_duration = 0.01" >> ${CFG}
    echo "hash_method = content" >> ${CFG}

jobs:
  build:
    <<: *dockersetup
    steps:
      - checkout
      - run: *runinstall

  download_data:
    <<: *dockersetup
    steps:
      - checkout
      - restore_cache:
          key: data-v2
      - run:
          name: Get test data and smriprep from box
          command: |
            cd /src/aslprep/.circleci
            source get_data.sh
            get_bids_data $PWD downsampled
      - save_cache:
          key: data-v2
          paths:
              - /src/aslprep/.circleci/data/downsampled

  aslprep_sub01:
    <<: *dockersetup
    steps:
      - checkout
      - run:
          name: Check whether build should be skipped
          command: |
            cd /src/aslprep
            if [[ "$( git log --format=oneline -n 1 $CIRCLE_SHA1 | grep -i -E '\[skip[ _]?aslprep_sub01\]' )" != "" ]]; then
              echo "Skipping aslprep_sub01 build"
              circleci step halt
            fi
      - restore_cache:
          key: data-v2
      - run: *runinstall
      - run:
          name: Run full aslprep on aslprep_sub01 bold
          no_output_timeout: 5h
          command: |
            pytest -rP -o log_cli=true -m "dset" --cov-append --cov-report term-missing --cov=aslprep --data_dir=/src/aslprep/.circleci/data --output_dir=/src/aslprep/.circleci/out --working_dir=/src/aslprep/.circleci/work aslprep
            mkdir /src/coverage
            mv /src/xcp_d/.coverage /src/coverage/.coverage.ds001419_nifti
      - run:
          name: Checking outputs of aslprep_sub01
          command: |
            cbfile=$(ls -f /tmp/aslprep_ds/aslprep/sub-01/perf/sub-01_desc-quality_control_cbf.csv)
            if [[ -f ${cbfile} ]]; then
            echo "processing complete"
               exit 0
            else
            echo "there is error "
                exit 1
            fi
      - store_artifacts:
          path: /tmp/aslprep_ds
      - persist_to_workspace:
          root: /src/coverage
          paths:
              - .coverage.pytests
      - store_artifacts:
          path: /src/xcp_d/.circleci/out/

  merge_coverage:
    <<: *dockersetup
    steps:
      - checkout
      - attach_workspace:
          at: /src/coverage
      - run: *runinstall
      - run:
          name: Merge coverage files
          command: |
            cd /src/coverage/
            coverage combine
            coverage xml
      - store_artifacts:
          path: /src/coverage
      - codecov/upload:
          file: /src/coverage/coverage.xml

  deployable:
    docker:
      - image: busybox:latest
    steps:
      - run: echo Deploying!

  build_and_deploy:
    environment:
      TZ: "/usr/share/zoneinfo/America/New_York"
    docker:
      - image: cimg/base:2020.09
    working_directory: /tmp/src/xcpd_build
    steps:
      - checkout
      - setup_remote_docker:
         version: 19.03.13
         docker_layer_caching: true
      - run:
          name: Build Docker image
          no_output_timeout: 3h
          command: |
            # Get version, update files.
            THISVERSION=$( python3 get_version.py )
            if [[ ${THISVERSION:0:1} == "0" ]] ; then
              echo "WARNING: latest git tag could not be found"
              echo "Please, make sure you fetch all tags from upstream with"
              echo "the command ``git fetch --tags --verbose`` and push"
              echo "them to your fork with ``git push origin --tags``"
            fi
            sed -i "s/title = {xcp_d}/title = {xcp_d ${CIRCLE_TAG:-$THISVERSION}}/" xcp_d/data/boilerplate.bib
            # Build docker image
            e=1 && for i in {1..5}; do
              docker build \
                --cache-from=pennlinc/xcp_d \
                --rm=false \
                -t pennlinc/xcp_d:latest \
                --build-arg BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"` \
                --build-arg VCS_REF=`git rev-parse --short HEAD` \
                --build-arg VERSION="${CIRCLE_TAG:-$THISVERSION}" . \
              && e=0 && break || sleep 15
            done && [ "$e" -eq "0" ]
      - run:
          name: Deploy to Docker Hub
          no_output_timeout: 40m
          command: |
            if [[ -n "$DOCKERHUB_TOKEN" ]]; then
              docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_TOKEN
              docker tag pennlinc/xcp_d pennlinc/xcp_d:unstable
              docker push pennlinc/xcp_d:unstable
              if [[ -n "$CIRCLE_TAG" ]]; then
                docker push pennlinc/xcp_d:latest
                docker tag pennlinc/xcp_d pennlinc/xcp_d:$CIRCLE_TAG
                docker push pennlinc/xcp_d:$CIRCLE_TAG
              fi
            fi

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/

      - download_data:
          filters:
            branches:
              ignore:
                - /docs?\/.*/
                - /tests?\/.*/
            tags:
              only: /.*/

      - aslprep_sub01:
          requires:
            - download_data
            - build
          filters:
            branches:
              ignore:
                - /docs?\/.*/
                - /tests?\/.*/
            tags:
              only: /.*/

      - merge_coverage:
          requires:
            - aslprep_sub01
          filters:
            branches:
              ignore:
                - /docs?\/.*/
                - /tests?\/.*/
            tags:
              only: /.*/

      - deployable:
          requires:
            - build
            - aslprep_sub01
          filters:
            branches:
              only: main
            tags:
              only: /.*/

      - build_and_deploy:
          requires:
            - deployable
          filters:
            branches:
              only: main
            tags:
              only: /.*/
