"""Utility functions for tests."""
import os
import subprocess
from contextlib import contextmanager
from glob import glob

import nibabel as nb
import numpy as np
from bids.layout import BIDSLayout


def get_test_data_path():
    """Return the path to test datasets, terminated with separator.

    Test-related data are kept in tests folder in "data".
    Based on function by Yaroslav Halchenko used in Neurosynth Python package.
    """
    return os.path.abspath(os.path.join(os.path.dirname(__file__), "data") + os.path.sep)


def check_generated_files(out_dir, output_list_file):
    """Compare files generated by xcp_d with a list of expected files."""
    xcpd_dir = os.path.join(out_dir, "xcp_d")
    found_files = sorted(glob(os.path.join(xcpd_dir, "**/*"), recursive=True))
    found_files = [os.path.relpath(f, out_dir) for f in found_files]

    # Ignore figures
    found_files = [f for f in found_files if "figures" not in f]

    with open(output_list_file, "r") as fo:
        expected_files = fo.readlines()
        expected_files = [f.rstrip() for f in expected_files]

    if sorted(found_files) != sorted(expected_files):
        expected_not_found = sorted(list(set(expected_files) - set(found_files)))
        found_not_expected = sorted(list(set(found_files) - set(expected_files)))

        msg = ""
        if expected_not_found:
            msg += "\nExpected but not found:\n\t"
            msg += "\n\t".join(expected_not_found)

        if found_not_expected:
            msg += "\nFound but not expected:\n\t"
            msg += "\n\t".join(found_not_expected)
        raise ValueError(msg)


def check_affines(data_dir, out_dir, input_type):
    """Confirm affines don't change across XCP runs."""
    fmri_layout = BIDSLayout(str(data_dir), validate=False, derivatives=False)
    xcp_layout = BIDSLayout(str(out_dir), validate=False, derivatives=False)
    if input_type == "cifti":  # Get the .dtseries.nii
        denoised_files = xcp_layout.get(
            invalid_filters="allow",
            datatype="func",
            run=1,
            extension=".dtseries.nii",
        )
        space = denoised_files[0].get_entities()["space"]
        bold_files = fmri_layout.get(
            invalid_filters="allow",
            datatype="func",
            run=1,
            space=space,
            extension=".dtseries.nii",
        )

    elif input_type == "nifti":  # Get the .nii.gz
        # Problem: it's collecting native-space data
        denoised_files = xcp_layout.get(
            datatype="func",
            run=1,
            suffix="bold",
            extension=".nii.gz",
        )
        space = denoised_files[0].get_entities()["space"]
        bold_files = fmri_layout.get(
            invalid_filters="allow",
            datatype="func",
            run=1,
            space=space,
            suffix="bold",
            extension=".nii.gz",
        )

    else:  # Nibabies
        denoised_files = xcp_layout.get(
            datatype="func",
            space="MNIInfant",
            suffix="bold",
            extension=".nii.gz",
        )
        bold_files = fmri_layout.get(
            invalid_filters="allow",
            datatype="func",
            space="MNIInfant",
            suffix="bold",
            extension=".nii.gz",
        )

    bold_file = bold_files[0].path
    denoised_file = denoised_files[0].path

    if input_type == "cifti":
        assert (
            nb.load(bold_file)._nifti_header.get_intent()
            == nb.load(denoised_file)._nifti_header.get_intent()
        )
    else:
        if not np.array_equal(nb.load(bold_file).affine, nb.load(denoised_file).affine):
            raise AssertionError(f"Affines do not match:\n\t{bold_file}\n\t{denoised_file}")

    print("No affines changed.")


def run_command(command, env=None):
    """Run a given shell command with certain environment variables set."""
    merged_env = os.environ
    if env:
        merged_env.update(env)
    process = subprocess.Popen(
        command,
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        shell=True,
        env=merged_env,
    )
    while True:
        line = process.stdout.readline()
        line = str(line, "utf-8")[:-1]
        print(line)
        if line == "" and process.poll() is not None:
            break

    if process.returncode != 0:
        raise Exception(
            f"Non zero return code: {process.returncode}\n" f"{command}\n\n{process.stdout.read()}"
        )


@contextmanager
def chdir(path):
    """Temporarily change directories.

    Taken from https://stackoverflow.com/a/37996581/2589328.
    """
    oldpwd = os.getcwd()
    os.chdir(path)
    try:
        yield
    finally:
        os.chdir(oldpwd)
